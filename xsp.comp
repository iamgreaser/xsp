#version 430

/*
Copyright (c) 2016 Ben "GreaseMonkey" Russell

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const bool DEBUG_FAULTS = false;
const bool DEBUG_IFETCH = false;
const bool DEBUG_STORES = false;
const bool DEBUG_JR = false;
const bool DEBUG_DMA = false;
const bool DEBUG_IRQ = false;
const bool DEBUG_SPU = true;
const bool DEBUG_GPU = false;
const bool DEBUG_TIMER = false;

const int SCANLINE_COUNT = 10;
//const int CYCLES_PER_SCANLINE = 2168;
const int CYCLES_PER_SCANLINE = 271; // divided by 8

const int CAUSE_Int  = 0x00;
const int CAUSE_AdEL = 0x04;
const int CAUSE_AdES = 0x05;
const int CAUSE_IBE  = 0x06;
const int CAUSE_DBE  = 0x07;
const int CAUSE_Sys  = 0x08;
const int CAUSE_Bp   = 0x09;
const int CAUSE_RI   = 0x0A;
const int CAUSE_CpU  = 0x0B;
const int CAUSE_Ov   = 0x0C;

layout(binding = 0, rgba8ui) restrict writeonly uniform uimage2D otex0;
layout(binding = 1, r8ui) restrict readonly uniform uimage2D font0;
layout(std430, binding = 1) restrict buffer psxStorage {
	uint debug_vram[64*32*2];
	int xcomms;
	int ram[2048*256];
	int vram[1024*256];
	int rom[512*256];
	int sram[512*256];
	int scratch[1*256];
	int gpu_fifo[16];
	int regs[32];
	int c0_regs[32];
	int rlo, rhi;
	int lsaddr, lsreg, lsop;
	int pc, pcdiff;
	int fault_cause, fault_pc;
	int seg7;
	int i_stat, i_mask;
	int gpu_stat, gpu_fifo_beg, gpu_fifo_end;
	int gpu_y;
	int dx_madr[8];
	int dx_bcr[8];
	int dx_chcr[8];
	int dx_len[8];
	int dx_xadr[8];
	int dpcr, dicr, dma_enabled;
};

layout(binding = 2) uniform atomic_uint debug_ypos;

uint tohexdigit(uint v)
{
	if(v <= 9) {
		return 0x30 + v;
	} else {
		return 0x41 + v - 0x0A;
	}
}

void debug_draw_hex_u32(int x, int y, uint v)
{
	int p = (64*y+x)&(64*32-1);
	debug_vram[p+0] = tohexdigit((v>>28U)&15U);
	debug_vram[p+1] = tohexdigit((v>>24U)&15U);
	debug_vram[p+2] = tohexdigit((v>>20U)&15U);
	debug_vram[p+3] = tohexdigit((v>>16U)&15U);
	debug_vram[p+4] = tohexdigit((v>>12U)&15U);
	debug_vram[p+5] = tohexdigit((v>> 8U)&15U);
	debug_vram[p+6] = tohexdigit((v>> 4U)&15U);
	debug_vram[p+7] = tohexdigit((v>> 0U)&15U);
}

void debug_draw_hex_u8(int x, int y, uint v)
{
	int p = (64*y+x)&(64*32-1);
	debug_vram[p+0] = tohexdigit((v>> 4U)&15U);
	debug_vram[p+1] = tohexdigit((v>> 0U)&15U);
}

int debug_get_line()
{
	int ypos = int(atomicCounterIncrement(debug_ypos)&31U);
	int p = 64*ypos;
	for(int x = 0; x < 40; x++) {
		debug_vram[p+x] = 0;
	}
	//debug_draw_hex_u8(38, ypos, seg7);
	return ypos;
}

void clear_debug_vram()
{
	// Clear VRAM
	for(int i = 0; i < 64*32; i++) {
		debug_vram[i] = 0;
	}

	// Reset debug Y pos
	for(int i = 0; i < 32; i++) {
		if((atomicCounterDecrement(debug_ypos)&31U) == 0) {
			break;
		}
	}
}

void fault_set_real(int cause, int op_pc)
{
	// Set EPC
	c0_regs[0x0E] = op_pc;

	// Shift user+int mode
	c0_regs[0x0C] = (c0_regs[0x0C] & ~0x3F) | ((c0_regs[0x0C] & 0x0F)<<2);

	// Set cause
	c0_regs[0x0D] = (c0_regs[0x0D] & ~0x8000007C)
		| ((cause&0x1F)<<2)
		;
	if((xcomms & 8) != 0) {
		c0_regs[0x0E] -= 4;
		c0_regs[0x0D] |= 0x80000000;
	}
	pc = (c0_regs[0x0C] & (1<<22)) == 0 ? 0x80000080 : 0xBFC00180;
	pcdiff = 4;

	xcomms &= ~0x18;
}

void fault_set(int cause, int op_pc)
{
	fault_cause = cause;
	fault_pc = op_pc;
	xcomms |= 4;
}

void irq_update(int op_pc)
{
	if((i_mask & i_stat) != 0) {
		c0_regs[0x0D] |= 0x0400;
	} else {
		c0_regs[0x0D] &= ~0x0400;
	}

	if((c0_regs[0x0C] & 1) != 0 && (c0_regs[0x0D] & c0_regs[0x0C] & 0xFF00) != 0) {
		fault_set(CAUSE_Int, op_pc);
	}
}

void irq_update_dma(int op_pc)
{
	//
	if((dicr&0x8000)!=0 ||
			((dicr&(1<<23))!=0
			&& (dicr&0x7F000000)!=0)) {

		dicr |= 0x80000000;
		i_stat |= 0x0008;
		irq_update(op_pc);
	} else {
		dicr &= ~0x80000000;
	}

}

int mem_read32_direct(int addr)
{
	addr &= 0x1FFFFFFF;
	if((addr>>19) == (0x1FC00000>>19)) {
		return rom[(addr>>2)&0x0007FFFF];

	} else if((addr>>23) == 0) {
		return ram[(addr>>2)&0x001FFFFF];

	} else if((addr>>10) == 0x1F800000>>10) {
		int pa = (addr>>2)&((1<<10)-1);
		return scratch[pa];

	} else if((addr>>19) == 0x1F000000>>19) {
		return 0;

	} else if((addr>>3) == (0x1F801810>>3)) {
		// TODO: GPU
		if(false && DEBUG_GPU) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x47;
			debug_vram[ypos*64+1] = 0x50;
			debug_vram[ypos*64+2] = 0x55;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(pc));
		}

		if((addr&4) == 0) {
			// TODO: handle GPU read buffer
			return 0;
		} else {
			return gpu_stat;
		}

	} else if((addr>>9) == (0x1F801C00>>9)) {
		// TODO: SPU
		if(DEBUG_SPU) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x53;
			debug_vram[ypos*64+1] = 0x50;
			debug_vram[ypos*64+2] = 0x55;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(pc));
		}
		return 0;

	} else if((addr>>7) == (0x1F801080>>7)) {
		// TODO: DMA
		if(DEBUG_DMA) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x44;
			debug_vram[ypos*64+1] = 0x4D;
			debug_vram[ypos*64+2] = 0x41;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(pc));
		}
		int chn = (addr>>4)&7;
		if(chn == 7) {
			if((addr&4) == 0) {
				return dpcr;
			} else {
				return dicr;
			}
		} else {
			switch((addr>>2)&3) {
				case 0: return dx_madr[chn];
				case 1: return dx_bcr[chn];
				case 2: return dx_chcr[chn];
				default: return 0;
			}
		}

	} else if((addr>>3) == (0x1F801070>>3)) {
		// TODO: IRQ
		if(DEBUG_IRQ) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x49;
			debug_vram[ypos*64+1] = 0x52;
			debug_vram[ypos*64+2] = 0x51;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(pc));
		}
		if((addr&4) == 0) {
			return i_stat;
		} else {
			return i_mask;
		}

	} else if((addr>>6) == (0x1F801100>>6)) {
		// TODO: timers
		if(DEBUG_TIMER) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x54;
			debug_vram[ypos*64+1] = 0x4D;
			debug_vram[ypos*64+2] = 0x52;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(pc));
		}
		switch((addr>>2)&3) {
			case 0:
				return 0xFFFE;
			case 1:
				return 0x1800;
			default:
				return 0;
		}

	} else {
		int ypos = debug_get_line();
		debug_vram[ypos*64+0] = 0x22;
		debug_vram[ypos*64+1] = 0x4C;
		debug_vram[ypos*64+2] = 0x22;
		debug_draw_hex_u32(4, ypos, addr);
		xcomms |= 2;
		return 0;
	}
}

void mem_write32_direct(int addr, int v, int mask)
{
	addr &= 0x1FFFFFFF;

	if(addr < 0x00200000) {
		int pa = (addr>>2)&0x001FFFFF;
		ram[pa] = (ram[pa] & ~mask) | (v & mask);

	} else if((addr>>10) == 0x1F800000>>10) {
		int pa = (addr>>2)&((1<<10)-1);
		scratch[pa] = (scratch[pa] & ~mask) | (v & mask);

	} else if((addr>>3) == (0x1F801810>>3)) {
		// TODO: GPU
		if(DEBUG_GPU) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x47;
			debug_vram[ypos*64+1] = 0x50;
			debug_vram[ypos*64+2] = 0x55;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(v));
			debug_draw_hex_u32(4+8+1+8+1, ypos, uint(mask));
		}

		if((addr&4) == 0) {
			// TODO: GP0
		} else {
			// TODO: GP1
		}

	} else if((addr>>9) == (0x1F801C00>>9)) {
		// TODO: SPU
		if(DEBUG_SPU && addr != 0x1F801DA8) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x53;
			debug_vram[ypos*64+1] = 0x50;
			debug_vram[ypos*64+2] = 0x55;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(v));
			debug_draw_hex_u32(4+8+1+8+1, ypos, uint(mask));
		}

	} else if((addr>>7) == (0x1F801080>>7)) {
		// TODO: DMA
		if(DEBUG_DMA) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x44;
			debug_vram[ypos*64+1] = 0x4D;
			debug_vram[ypos*64+2] = 0x41;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(v));
			debug_draw_hex_u32(4+8+1+8+1, ypos, uint(mask));
		}
		int chn = (addr>>4)&7;
		if(chn == 7) {
			if((addr&4) == 0) {
				dpcr = v; 
			} else {
				dicr &= ~(v&0x7F000000);
				dicr &= 0x7F000000;
				dicr |= v&0x00FF803F;
				irq_update_dma(pc);
			}

		} else {
			switch((addr>>2)&3) {
				case 0:
					dx_madr[chn] = v&0x00FFFFFF;
					break;
				case 1:
					dx_bcr[chn] = v;
					break;
				case 2:
					dx_chcr[chn] = (v&0x71770703)
						| (dx_chcr[chn]&0x00000000);
					if((dx_chcr[chn]&(1<<24)) != 0) {
						dma_enabled |=  (8<<(chn*4));
						dx_len[chn] = dx_bcr[chn];
						dx_xadr[chn] = dx_madr[chn];
						dx_chcr[chn] &= ~(1<<28);
					} else {
						dma_enabled &= ~(8<<(chn*4));
					}
					break;
			}
		}

	} else if((addr>>3) == (0x1F801070>>3)) {
		// TODO: IRQ
		if((addr&4) == 0) {
			i_stat &= v;
		} else {
			i_mask = v;
		}
		irq_update(pc);
		if(DEBUG_IRQ) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x49;
			debug_vram[ypos*64+1] = 0x52;
			debug_vram[ypos*64+2] = 0x51;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(v));
			debug_draw_hex_u32(4+8+1+8+1, ypos, uint(mask));
		}

	} else if((addr>>6) == (0x1F801100>>6)) {
		// TODO: timers
		if(DEBUG_TIMER) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x54;
			debug_vram[ypos*64+1] = 0x4D;
			debug_vram[ypos*64+2] = 0x52;
			debug_draw_hex_u32(4, ypos, uint(addr));
			debug_draw_hex_u32(4+8+1, ypos, uint(v));
			debug_draw_hex_u32(4+8+1+8+1, ypos, uint(mask));
		}

	} else if((addr>>6) == (0x1F801000>>6)) {
		// TODO: memory control

	} else if((addr>>0) == (0x1F801060>>0)) {
		// TODO: memory control

	} else if((addr>>0) == (0x1F802041>>0)) {
		// TODO: POST

	} else if((addr>>0) == (0x1FFE0130>>0)) {
		// TODO: in-CPU weird things

	} else {
		int ypos = debug_get_line();
		debug_vram[ypos*64+0] = 0x22;
		debug_vram[ypos*64+1] = 0x53;
		debug_vram[ypos*64+2] = 0x22;
		debug_draw_hex_u32(4, ypos, addr);
		xcomms |= 2;
	}
	if(DEBUG_STORES) {
		int ypos = debug_get_line();
		debug_draw_hex_u32(2, ypos, uint(addr));
		debug_draw_hex_u32(2+8+1, ypos, uint(v));
		debug_draw_hex_u32(2+8+1+8+1, ypos, uint(mask));
	}
}

void mips_decode_op_special(int op_pc, int op)
{
	// Decode
	int rs = (op>>21)&31;
	int rt = (op>>16)&31;
	int rd = (op>>11)&31;
	int sa = (op>>6)&31;
	int ofunc = op&63;
	int ypos;
	int taddr;

	switch(ofunc)
	{
		case 0x00: // SLL
			regs[rd] = regs[rt] << sa;
			break;
		case 0x02: // SRL
			regs[rd] = int(uint(regs[rt]) >> uint(sa));
			break;
		case 0x03: // SRA
			regs[rd] = regs[rt] >> sa;
			break;
		case 0x04: // SLLV
			regs[rd] = regs[rt] << regs[rs];
			break;
		case 0x06: // SRLV
			regs[rd] = int(uint(regs[rt]) >> uint(regs[rs]));
			break;
		case 0x07: // SRAV
			regs[rd] = regs[rt] >> regs[rs];
			break;

		case 0x09: // JALR
			regs[rd] = op_pc + 8;
			// FALL THROUGH
		case 0x08: // JR
			pcdiff = regs[rs];
			pcdiff -= pc;
			xcomms |= 0x10;
			if(DEBUG_JR) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x22;
				debug_vram[ypos*64+1] = 0x22;
				debug_vram[ypos*64+2] = 0x22;
				debug_draw_hex_u32(4, ypos, regs[rs]);
				debug_draw_hex_u8(4+8+1, ypos, rs);
				debug_draw_hex_u32(4+8+1+2+1, ypos, op_pc);
				//if(regs[rs] >= 0) { xcomms |= 2; }
			}
			break;

		case 0x0C: // SYSCALL
			if(DEBUG_FAULTS) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x53;
				debug_vram[ypos*64+1] = 0x59;
				debug_vram[ypos*64+2] = 0x53;
				debug_draw_hex_u32(4, ypos, op_pc);
			}
			fault_set(CAUSE_Sys, op_pc);
			break;
		case 0x0D: // BREAK
			if(DEBUG_FAULTS) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x42;
				debug_vram[ypos*64+1] = 0x52;
				debug_vram[ypos*64+2] = 0x4B;
				debug_draw_hex_u32(4, ypos, op_pc);
			}
			fault_set(CAUSE_Bp, op_pc);
			break;

		case 0x10: // MFHI
			regs[rd] = rhi;
			break;
		case 0x11: // MTHI
			rhi = regs[rs];
			break;
		case 0x12: // MFLO
			regs[rd] = rlo;
			break;
		case 0x13: // MTLO
			rlo = regs[rs];
			break;

		case 0x18: // MUL
			{
				int iva = regs[rs];
				int ivb = regs[rt];
				uint va = abs(iva);
				uint vb = abs(ivb);

				uint al = (va&0xFFFFU);
				uint ah = ((va>>16U)&0xFFFFU);
				uint bl = (vb&0xFFFFU);
				uint bh = ((vb>>16U)&0xFFFFU);

				uint mll = al*bl;
				uint mlh = al*bh;
				uint mhl = ah*bl;
				uint mhh = ah*bh;

				rlo = int(mll + ((mlh+mhl)<<16U));
				rhi = int(((mlh+mhl+(mll>>16U))>>16U)+mhh);
				// FIXME verify
				if((iva < 0) != (ivb < 0)) {
					rhi = -rhi;
					if(rlo > 0) { rhi--; }
					rlo = -rlo;
				}
			}
		case 0x19: // MULU
			{
				uint va = regs[rs];
				uint vb = regs[rt];

				uint al = (va&0xFFFFU);
				uint ah = ((va>>16U)&0xFFFFU);
				uint bl = (vb&0xFFFFU);
				uint bh = ((vb>>16U)&0xFFFFU);

				uint mll = al*bl;
				uint mlh = al*bh;
				uint mhl = ah*bl;
				uint mhh = ah*bh;

				rlo = int(mll + ((mlh+mhl)<<16U));
				rhi = int(((mlh+mhl+(mll>>16U))>>16U)+mhh);
			}
			break;

		case 0x1A: // DIV
			if(regs[rt] == 0) {
				// DIV BY ZERO
				rhi = regs[rs];
				rlo = (regs[rs] < 0 ? 1 : -1);
			} else {
				rhi = regs[rs] % regs[rt];
				rlo = regs[rs] / regs[rt];
			}
			break;
		case 0x1B: // DIVU
			if(regs[rt] == 0) {
				// DIV BY ZERO
				rhi = regs[rs];
				rlo = -1;
			} else {
				rhi = int(uint(regs[rs]) % uint(regs[rt]));
				rlo = int(uint(regs[rs]) / uint(regs[rt]));
			}
			break;

		// TODO: overflow traps
		case 0x20: // ADD
		case 0x21: // ADDU
			regs[rd] = regs[rs] + regs[rt];
			break;
		case 0x22: // SUB
		case 0x23: // SUBU
			regs[rd] = regs[rs] - regs[rt];
			break;

		case 0x24: // AND
			regs[rd] = regs[rs] & regs[rt];
			break;
		case 0x25: // OR
			regs[rd] = regs[rs] | regs[rt];
			break;
		case 0x26: // XOR
			regs[rd] = regs[rs] ^ regs[rt];
			break;
		case 0x27: // NOR
			regs[rd] = ~(regs[rs] | regs[rt]);
			break;

		case 0x2A: // SLT
			regs[rd] = (regs[rs] < regs[rt] ? 1 : 0);
			break;
		case 0x2B: // SLTU
			regs[rd] = (uint(regs[rs]) < uint(regs[rt]) ? 1 : 0);
			break;

		default:
			// RI
			if(DEBUG_FAULTS) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x21;
				debug_vram[ypos*64+1] = 0x21;
				debug_vram[ypos*64+2] = 0x53;
				debug_draw_hex_u8(4, ypos, ofunc);
			}
			fault_set(CAUSE_RI, op_pc);
			break;
	};
}

void mips_decode_op_regimm(int op_pc, int op)
{
	// Decode
	int rs = (op>>21)&31;
	int rt = (op>>16)&31;
	int rd = (op>>11)&31;
	int sa = (op>>6)&31;
	int ofunc = op&63;
	int ypos;
	int taddr;

	switch(rt)
	{
		case 0x00: // BLTZ
			if(regs[rs] < 0) {
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;
		case 0x01: // BGEZ
			if(regs[rs] >= 0) {
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;
		case 0x08: // BLTZAL
			if(regs[rs] < 0) {
				regs[31] = op_pc + 8;
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;
		case 0x09: // BGEZAL
			if(regs[rs] >= 0) {
				regs[31] = op_pc + 8;
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;

		default:
			// RI
			if(DEBUG_FAULTS) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x21;
				debug_vram[ypos*64+1] = 0x21;
				debug_vram[ypos*64+2] = 0x42;
				debug_draw_hex_u8(4, ypos, rt);
			}
			fault_set(CAUSE_RI, op_pc);
			break;
	};
}

void mips_decode_op_cop0(int op_pc, int op)
{
	int rs = (op>>21)&31;
	int rt = (op>>16)&31;
	int rd = (op>>11)&31;
	int sa = (op>>6)&31;
	int ypos;
	int tval;

	switch(rs)
	{
		case 0x00: // MFC
			switch(rd) {
				case 0x03: // BPC
					regs[rt] = c0_regs[rd];
					break;

				case 0x0C: // SR
					regs[rt] = c0_regs[rd];
					break;

				case 0x0D: // CAUSE
					regs[rt] = c0_regs[rd];
					break;

				case 0x0E: // EPC
					regs[rt] = c0_regs[rd];
					break;

				default:
					// RI
					if(DEBUG_FAULTS) {
						ypos = debug_get_line();
						debug_vram[ypos*64+0] = 0x21;
						debug_vram[ypos*64+1] = 0x30;
						debug_vram[ypos*64+2] = 0x46;
						debug_draw_hex_u8(4, ypos, rt);
						debug_draw_hex_u8(4+2+1, ypos, rd);
						debug_draw_hex_u32(4+2+1+2+1, ypos, regs[rd]);
					}
					fault_set(CAUSE_RI, op_pc);
					break;

			} break;

		case 0x04: // MTC
			switch(rd) {

				case 0x03: // BPC
					// TODO!
					c0_regs[rd] = regs[rt];
					break;

				case 0x05: // BDA
					// TODO!
					c0_regs[rd] = regs[rt];
					break;

				case 0x06: // JUMPDEST
					// TODO!
					c0_regs[rd] = regs[rt];
					break;

				case 0x07: // DCIC
					// TODO!
					c0_regs[rd] = regs[rt];
					break;

				case 0x09: // BDAM
					// TODO!
					c0_regs[rd] = regs[rt];
					break;

				case 0x0B: // BPCM
					// TODO!
					c0_regs[rd] = regs[rt];
					break;

				case 0x0C: // SR
					// TODO!
					c0_regs[rd] = regs[rt];
					break;

				case 0x0D: // CAUSE
					c0_regs[rd] = (c0_regs[rd] & ~0x0300)
						| (regs[rt] & 0x0300);
					break;

				default:
					// RI
					if(DEBUG_FAULTS) {
						ypos = debug_get_line();
						debug_vram[ypos*64+0] = 0x21;
						debug_vram[ypos*64+1] = 0x30;
						debug_vram[ypos*64+2] = 0x54;
						debug_draw_hex_u8(4, ypos, rt);
						debug_draw_hex_u8(4+2+1, ypos, rd);
						debug_draw_hex_u32(4+2+1+2+1, ypos, regs[rt]);
					}
					fault_set(CAUSE_RI, op_pc);
					break;

			} break;

		case 0x10: // COP0
			switch(op&0x3F) {
				case 0x10: // RFE
					c0_regs[0x0C] = (c0_regs[0x0C]&~0x0F)
						| ((c0_regs[0x0C]>>2)&0x0F);
					break;

				default:
					// RI
					if(DEBUG_FAULTS) {
						ypos = debug_get_line();
						debug_vram[ypos*64+0] = 0x21;
						debug_vram[ypos*64+1] = 0x30;
						debug_vram[ypos*64+2] = 0x43;
						debug_draw_hex_u8(4, ypos, rs);
					}
					fault_set(CAUSE_RI, op_pc);
					break;

			} break;

		default:
			// RI
			if(DEBUG_FAULTS) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x21;
				debug_vram[ypos*64+1] = 0x30;
				debug_vram[ypos*64+2] = 0x49;
				debug_draw_hex_u8(4, ypos, rs);
			}
			fault_set(CAUSE_RI, op_pc);
			break;
	};
}

void mips_decode_op_cop(int op_pc, int op)
{
	// Select coprocessor
	int cop = (op>>26)&3;
	int ypos;
	switch(cop)
	{
		case 0:
		case 4: // COP0
			mips_decode_op_cop0(op_pc, op);
			break;

		default:
			// CpU
			if(DEBUG_FAULTS) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x21;
				debug_vram[ypos*64+1] = 0x30+(cop&0x3);
				debug_vram[ypos*64+2] = 0x55;
				debug_draw_hex_u8(4, ypos, cop&0x3);
			}
			fault_set(CAUSE_CpU, op_pc);
			c0_regs[0x0D] &= ~(3<<29);
			c0_regs[0x0D] |= ((cop&3)<<29);
			break;
	}
}

void mips_decode_op_main(int op_pc, int op, int otyp)
{
	int rs = (op>>21)&31;
	int rt = (op>>16)&31;
	int rd = (op>>11)&31;
	int sa = (op>>6)&31;
	int ofunc = op&63;
	int ypos;
	int taddr;

	switch(otyp)
	{
		case 0x03: // JAL
			regs[31] = op_pc + 8;
			// FALL THROUGH
		case 0x02: // J
			pcdiff = (op_pc&0xF0000000)|((op&0x3FFFFFF)<<2);
			pcdiff -= pc;
			xcomms |= 0x10;
			break;

		case 0x04: // BEQ
			if(regs[rs] == regs[rt]) {
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;
		case 0x05: // BNE
			if(regs[rs] != regs[rt]) {
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;
		case 0x06: // BLEZ
			if(regs[rs] <= 0) {
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;
		case 0x07: // BGTZ
			if(regs[rs] > 0) {
				pcdiff = ((op<<16)>>14);
				xcomms |= 0x10;
			}
			break;

		// TODO: overflow traps
		case 0x08: // ADDI
		case 0x09: // ADDIU
			regs[rt] = regs[rs] + ((op<<16)>>16);
			break;
		case 0x0A: // SLTI
			regs[rt] = (regs[rs] < ((op<<16)>>16) ? 1 : 0);
			break;
		case 0x0B: // SLTIU
			regs[rt] = (uint(regs[rs]) < uint(op&0xFFFF) ? 1 : 0);
			break;

		case 0x0C: // ANDI
			regs[rt] = regs[rs] & (op&0xFFFF);
			break;
		case 0x0D: // ORI
			regs[rt] = regs[rs] | (op&0xFFFF);
			break;
		case 0x0E: // XORI
			regs[rt] = regs[rs] ^ (op&0xFFFF);
			break;
		case 0x0F: // LUI
			regs[rt] = (op&0xFFFF)<<16;
			break;

		// TODO: AdEL
		case 0x20: // LB
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = rt;
			break;
		case 0x21: // LH
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = rt;
			break;
		case 0x23: // LW
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = rt;
			break;
		case 0x24: // LBU
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = rt;
			break;
		case 0x25: // LHU
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = rt;
			break;

		case 0x28: // SB
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = -2-rt;
			break;
		case 0x29: // SH
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = -2-rt;
			break;
		case 0x2B: // SW
			lsaddr = regs[rs] + ((op<<16)>>16);
			lsreg = -2-rt;
			break;

		default:
			// RI
			if(DEBUG_FAULTS) {
				ypos = debug_get_line();
				debug_vram[ypos*64+0] = 0x21;
				debug_vram[ypos*64+1] = 0x21;
				debug_vram[ypos*64+2] = 0x4D;
				debug_draw_hex_u8(4, ypos, otyp);
			}
			fault_set(CAUSE_RI, op_pc);
			break;
	};
}

void mips_decode_op()
{
	// Check if storing
	if(lsreg <= -2) {
		// Store
		lsreg = -2-lsreg;
		if((c0_regs[0x0C] & 0x10000) == 0) {
			int mask = 0;
			int v = regs[lsreg];
			int shift = 0;
			switch(lsop) {
				case 0x28: // SB
					shift = ((lsaddr&3)<<3);
					mask = 0xFF;
					break;
				case 0x29: // SH
					shift = ((lsaddr&2)<<3);
					mask = 0xFFFF;
					break;
				case 0x2B: // SW
					shift = 0;
					mask = 0xFFFFFFFF;
					break;
			}
			mem_write32_direct(lsaddr, (v&mask)<<shift, mask<<shift);
		}
		lsreg = -1;
		return;
	}

	// Fetch op or thing to load
	int vread = mem_read32_direct(lsreg>=0 ? lsaddr : pc);
	if(lsreg >= 0) {
		// Load
		int v = 0;
		if((c0_regs[0x0C] & 0x10000) == 0) {
			v = vread;
			switch(lsop) {
				case 0x20: // LB
					v = ((v>>((lsaddr&3)<<3))<<24)>>24;
					break;
				case 0x21: // LH
					v = ((v>>((lsaddr&2)<<3))<<16)>>16;
					break;
				case 0x23: // LW
					v = v;
					break;
				case 0x24: // LBU
					v = (v>>((lsaddr&3)<<3))&0xFF;
					break;
				case 0x25: // LHU
					v = (v>>((lsaddr&2)<<3))&0xFFFF;
					break;
			}
		}
		regs[lsreg] = v;
		lsreg = -1;
		return;
	}
	int op = vread;
	int op_pc = pc;
	pc += pcdiff;
	pcdiff = 4;
	int otyp = (op>>26)&63;
	xcomms = (xcomms & ~0x18) | ((xcomms>>1)&8);

	// Draw op
	if(DEBUG_IFETCH) {
		int ypos = debug_get_line();
		int rs = (op>>21)&31;
		int rt = (op>>16)&31;
		int rd = (op>>11)&31;
		int sa = (op>>6)&31;
		int ofunc = op&63;
		debug_draw_hex_u32(0, ypos, uint(op_pc));
		debug_draw_hex_u32(0+8+1, ypos, op);
		debug_draw_hex_u8(0+8+1+8+1+(2+1)*0, ypos, otyp);
		debug_draw_hex_u8(0+8+1+8+1+(2+1)*1, ypos, rs);
		debug_draw_hex_u8(0+8+1+8+1+(2+1)*2, ypos, rt);
		debug_draw_hex_u8(0+8+1+8+1+(2+1)*3, ypos, rd);
		debug_draw_hex_u8(0+8+1+8+1+(2+1)*4, ypos, sa);
		debug_draw_hex_u8(0+8+1+8+1+(2+1)*5, ypos, ofunc);
	}

	// Reset things
	regs[0] = 0;
	lsreg = -1;

	// Decode
	if(otyp <= 1) {
		if(otyp == 0) {
			mips_decode_op_special(op_pc, op);
		} else {
			mips_decode_op_regimm(op_pc, op);
		}

	} else if((otyp>>2)==0x04) {
		mips_decode_op_cop(op_pc, op);

	} else {
		mips_decode_op_main(op_pc, op, otyp);
	}

	if(lsreg != -1) {
		lsop = otyp;
	}

	if((xcomms & 4) != 0) {
		xcomms &= ~4;
		fault_set_real(fault_cause, fault_pc);
	}
}

void gpu_run()
{
	// TODO!
	gpu_y += 1;

	// No idea when vblank *really* hits, sadly.
	if(gpu_y == 240) {
		i_stat |= 0x0001;
		irq_update(pc);
	}

	if(gpu_y >= 314) {
		gpu_y = 0;
		//i_stat &= ~0x0001;
		//irq_update(pc);
	}
}

void mips_run()
{
	for(int i = 0; i < CYCLES_PER_SCANLINE; i++) {
		if((xcomms&2) != 0) {
			break;
		}
		if((pc&3) != 0 || pc == 0x00000000) {
			int ypos = debug_get_line();
			debug_vram[ypos*64+0] = 0x21;
			debug_vram[ypos*64+1] = 0x50;
			debug_vram[ypos*64+2] = 0x43;
			debug_draw_hex_u32(4, ypos, pc);
			xcomms |= 2;
			break;
		}
		if((dpcr&dma_enabled) != 0) {
			int m = dpcr&dma_enabled;

			// DMA6: Order table generator
			if((m&(8<<(4*6))) != 0) {
				int l = dx_len[6]&0xFFFF;
				dx_len[6] = (dx_len[6]-1)&0xFFFF;
				if(l == 1) {
					ram[dx_xadr[6]>>2] = 0x00FFFFFF;
					dma_enabled &= ~(8<<(4*6));
					dx_chcr[6] &= ~(1<<24);
					if((dicr&(0x00010000<<6)) != 0) {
						dicr |= (0x01000000<<6);
						irq_update_dma(pc);
					}
				} else {
					ram[dx_xadr[6]>>2] = (dx_xadr[6]&0x00FFFFFF)-4;
				}
				dx_xadr[6] -= 4;
				continue;
			}
		}
		mips_decode_op();
	}
}

void main()
{
	// Reset if necessary
	if((xcomms&1) != 0) {
		// CPU
		pc = 0xBFC00000;
		pcdiff = 4;
		xcomms &= ~0x1F;
		seg7 = 0;
		c0_regs[0x0C] = (1<<22);
		lsreg = -1;

		// GPU
		gpu_fifo_beg = 0;
		gpu_fifo_end = 0;
		gpu_stat = 0x14092600;
		gpu_y = 0;

		// IRQ
		i_mask = 0;
		i_stat = 0;

		// DMA
		dicr = 0;
		dpcr = 0x07654321;
		dma_enabled = 0;
		for(int i = 0; i < 7; i++) {
			dx_madr[i] = 0;
			dx_bcr[i] = 0;
			dx_chcr[i] = 0;
		}

		// Debug
		clear_debug_vram();
		int ypos = debug_get_line();
		debug_vram[ypos*64+0] = 0x52;
		debug_vram[ypos*64+1] = 0x53;
		debug_vram[ypos*64+2] = 0x54;
	}

	// Perform loop
	for(int j = 0; j < SCANLINE_COUNT; j++) {
		mips_run();
		gpu_run();
	}
}

